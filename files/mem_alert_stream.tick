// mem_alert_stream

// metric: used_percent
// available_fields: "active","available","available_percent","buffered","cached","free","inactive","total","used"

// TELEGRAF CONFIGURATION
// [[inputs.mem]]

// DEFINE: kapacitor define mem_alert_stream -type stream -tick mem/mem_alert_stream.tick -dbrp telegraf.autogen
// ENABLE: kapacitor enable mem_alert_stream

// Parameters
var info = 70
var warn = 85
var crit = 92
var infoSig = 3.5
var warnSig = 4
var critSig = 4.5
var period = 5m
var every = 5m

// Dataframe
var data = stream
    |from()
        .database('telegraf')
        .retentionPolicy('autogen')
        .measurement('mem')
        .groupBy('host', 'service', 'datacenter')
    |window()
        .period(period)
        .every(every)
    |mean('used_percent')
        .as('stat')
    
// Thresholds
var alert = data
    |eval(lambda: sigma("stat"))
        .as('sigma')
        .keep()
    |alert()
        .id('{{ .Name }}/{{ index .Tags "service" }}/{{ index .Tags "datacenter" }}/{{ index .Tags "host" }}')
	.message('{{ .ID }} is {{ .Level }} mean:{{ index .Fields "stat" }} stddev:{{ index .Fields "sigma" }} @here')
        //.info(lambda: "stat" > info OR "sigma" > infoSig)
        .warn(lambda: "stat" > warn OR "sigma" > warnSig)
        .crit(lambda: "stat" > crit OR "sigma" > critSig)

// Alert
alert
    .email()
    .slack()
    .log('/tmp/mem_alert_stream.log')
